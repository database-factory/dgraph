namespace task;

// UidList returns the subjects matching the uid list
// TermsList returns values which match the terms
// GeoFilter returns values which match the geo query
union QueryFilter { UidList, TermList, GeoFilter }

table Query {
	attr:string;
	count:int;
	offset:int;
	afterUid:ulong;
	getCount:ushort;
	
        // Different ways in which you can filter the uids
        filter:QueryFilter;
	// Exactly one of uids and terms is populated.
	uids:[ulong];
	tokens:[string];
	
	// Intersect results with this UID list. If uids is populated, then this is
	// an "intersection query". If terms is populated, this is a "filter query".
	toIntersect:UidList;
}

table TermList {
    terms:[string];
}

enum GeoQuery : byte { Within, Contains, Intersects, Near }

table GeoFilter {
    // The type of query that is being run
    query:GeoQuery;
    // Geo data in WKB format that is the parameter to the query.
    data:[ubyte];
    // Optional, used for Near queries.
    maxDistance:uint;
}

table Value {
	val:[ubyte];
	valType:ubyte;
}

table Num {
	group:uint;
	val:int;
}

table UidList {
	uids:[ulong];
}

table CountList {
	count:[uint];
}

table Result {
	uidmatrix:[UidList];
	values:ValueList;
	count:CountList;
}

table ValueList {
	values:[Value];
}

table KV {
	key:[ubyte];
	val:[ubyte];
}

table KC {
	key:[ubyte];
	checksum:[ubyte];
}

table GroupKeys {
	groupid:ulong;
	keys:[KC];
}

table RaftContext {
	id:ulong;
	group:uint;
	addr:string;
}

table Membership {
	id:ulong;
	group:uint;
	addr:string;
	leader:bool;
	amdead:bool;
}
